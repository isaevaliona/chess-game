from chess_board import ChessBoard

class ChessGame:
    def __init__(self):
        self.board = ChessBoard()
        self.current_player = 'white'
    
    def start_game(self):
        print("üéØ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å–Ω—ã–µ —à–∞—Ö–º–∞—Ç—ã!")
        print("=========================================")
        print("‚ôüÔ∏è  –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å–æ –≤—Å–µ–º–∏ —Ñ–∏–≥—É—Ä–∞–º–∏!")
        
        print("üéÆ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –ë–µ–ª—ã–µ —Ö–æ–¥—è—Ç –ø–µ—Ä–≤—ã–º–∏.")
        print("üìù –§–æ—Ä–º–∞—Ç —Ö–æ–¥–∞: e2 e4 (–æ—Ç–∫—É–¥–∞ –∫—É–¥–∞)")
        print("‚ùå –î–ª—è –≤—ã—Ö–æ–¥–∞ –≤–≤–µ–¥–∏—Ç–µ 'quit'")
        
        while True:
            self.board.display()
            print(f"–•–æ–¥ {'–±–µ–ª—ã—Ö' if self.current_player == 'white' else '—á–µ—Ä–Ω—ã—Ö'} ({self.current_player})")
            
            move = input("–í–∞—à —Ö–æ–¥: ").strip().lower()
            
            if move == 'quit':
                print("–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
                break
            
            if not self.process_move(move):
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ö–æ–¥! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                continue
            
            # –°–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–∞
            self.current_player = 'black' if self.current_player == 'white' else 'white'
    
    def process_move(self, move_input):
        try:
            parts = move_input.split()
            if len(parts) != 2:
                return False
            
            from_pos = self.parse_position(parts[0])
            to_pos = self.parse_position(parts[1])
            
            if not from_pos or not to_pos:
                return False
            
            piece = self.board.get_piece(from_pos)
            if not piece or piece.color != self.current_player:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ø—É—Å—Ç–∏–º–æ—Å—Ç–∏ —Ö–æ–¥–∞
            possible_moves = piece.get_possible_moves(self.board, from_pos)
            if to_pos not in possible_moves:
                return False
            
            # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ö–æ–¥–∞
            return self.board.move_piece(from_pos, to_pos)
            
        except Exception as e:
            return False
    
    def parse_position(self, pos_str):
        if len(pos_str) != 2:
            return None
        
        col_char, row_char = pos_str[0], pos_str[1]
        
        if col_char not in 'abcdefgh' or row_char not in '12345678':
            return None
        
        col = ord(col_char) - ord('a')
        row = 8 - int(row_char)
        
        return (row, col)
    
    def is_checkmate(self):
        return False